import pygame, sys
import numpy as np
from pygame import mixer

pygame.init() #Need to initialize pygame
mixer.init() #Need to initialize mixer

# Set the width and height for the screen
width = 600
height = 600
board_rows = 3
board_cols = 3
circle_radius = 60 # The radius of the circle
circle_width = 5 #The width of the circle
space = 55 #how much space from the lines I need in order to make my x fit in the box
red = (255, 0, 0)
bg_color = (28, 170, 156) #created a background color in the back of my background photo
circle_radius = 60 # The radius of the circle
circle_width = 5 #The width of the circle
# setting constants for the size of screen
screen = pygame.display.set_mode((width, height))
screen.fill( bg_color )
background = pygame.image.load('Goingmerry.jpg') #Used a One Piece photo as the background to replace the other background
screen.blit(background, (0,0)) 
pygame.display.set_caption( "TIC - TAC - ANIME") #What the name of the game is called

# This is for the background music

# Loading the song
mixer.music.load("op.ogg")
  
# Setting the volume
mixer.music.set_volume(0.7)
  
#To play the song an infinite amount of times
mixer.music.play(-1) 


#Below I am making the board
board = np.zeros((board_rows, board_cols))

#Below I'm going to start drawing the lines for the game
def draw_lines():
    # first horizontal line
    pygame.draw.line( screen, 'black', (50,200), (550, 200), 5)
    # second horizontal line
    pygame.draw.line( screen, 'black', (50,400), (550,400), 5 )
    # first vertical line
    pygame.draw.line( screen, 'black', (200,50), (200,550), 5 )
    #second vertical line
    pygame.draw.line( screen, 'black', (400,50), (400,550), 5 )

#Here I am drawing the X's and O's
def draw_figures():
    for row in range(board_rows):
        for col in range(board_cols):
            if board[row][col]== 1:
                pygame.draw.circle( screen, 'black', (int( col * 200 + 200 / 2 ), int( row * 200 + 200/ 2)), circle_radius, circle_width)
            elif board[row][col]== 2:
                pygame.draw.line(screen, 'black', (col * 200 + space, row * 200 + 200 - space), (col * 200 + 200 - space, row * 200 + space), 5)
                pygame.draw.line(screen , 'black',(col * 200 + space, row * 200 + space), (col * 200 + 200 - space, row * 200 + 200 - space), 5)
def mark_square(row,col,player):
    board[row][col] = player

def available_square(row, col):
    if board[row][col] == 0:
        return True
    else:
        return False
# Below I created a function to know if the board is full
def is_board_full():
    for row in range(board_rows): 
        for col in range(board_cols):
            if board[row][col]==0: #There is an empty square
                return False
    return True #There is no empty square
# Checking which player wins
def check_win(player):
    # check if the win is won vertically
    for col in range(board_cols):
        if board[0][col] == player and board[1][col] == player and board[2][col]==player:
            draw_vertical_winning_line(col, player)
            return True
    # check if the win is won horizontally

    for row in range(board_rows):
        if board[row][0]==player and board[row][1] == player and board[row][2]==player:
            draw_horizontal_winning_line(row,player)
            return True
    # check if win is won diagonally (upward)
    if board[2][0] == player and board[1][1] == player and board[0][2] == player:
        draw_up_diagonal(player)
        return True
    # check if win is won diagonally (downward)
    if board[0][0] == player and board[1][1] == player and board[2][2] == player:
        draw_down_diagonal(player)
        return True
    return False #There is no win

# drawing the winning line vetically

def draw_vertical_winning_line(col, player):
    posX = col * 200 + 100
    if player == 1:
        color = 'black'
    elif player == 2:
        color = 'black'
    pygame.draw.line( screen, 'black', (posX, 15), (posX, height - 15), 5)
        

# drawing the winning line horizonally

def draw_horizontal_winning_line(row, player):
    posY = row * 200 + 100
    if player == 1:
        color = 'black'
    elif player == 2:
        color = 'black'
    pygame.draw.line( screen, color, (15, posY), (width - 15, posY), 5)

# drawing the winning diagonal line (upways)

def draw_up_diagonal(player):
    if player == 1:
        color = 'black'
    elif player == 2:
        color = 'black'
    pygame.draw.line( screen, color, (15, height - 15), (width -15, 15), 5)

# drawing the winning diagonal line (downwards)

def draw_down_diagonal(player):
    if player == 1:
        color = 'black'
    elif player == 2:
        color = 'black'
    pygame.draw.line (screen, 'black', (15, 15,), (width - 15, height - 15), 5)

# function if the players want to restart the game

def restart():
    screen.fill( bg_color )
    background = pygame.image.load('Goingmerry.jpg')
    screen.blit(background, (0,0))
    draw_lines()
    for row in range(board_rows):
            for col in range(board_cols):
                    board[row][col] = 0
draw_lines()
player = 1
end_game = False
#main loop
while True:
    for event in pygame.event.get():
        if event.type == pygame.quit:
            sys.exit()
        if event.type == pygame.MOUSEBUTTONDOWN and not end_game:
            mouseX=event.pos[0] #X
            mouseY=event.pos[1] #Y

            clicked_row = int(mouseY // 200)
            clicked_col = int(mouseX // 200)

        

            if available_square( clicked_row, clicked_col ):
                
                
                    mark_square( clicked_row, clicked_col, player)
                    if check_win(player):
                        end_game = True
                    player = player % 2 + 1
           
                    draw_figures()
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_r:
                restart()
                player = 1
                end_game = False

    pygame.display.update()
